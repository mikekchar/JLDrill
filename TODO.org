= JLDrill TODO

* Process

This file contains the development plan for JLDrill.  The first
section discusses the purpose of the next stable release.  Following
that is the current development release.  The number of JellyBeans
chosen for the development release should be enough so that it can
be released in about a month.

Following the current development release is the next development
release.  New stories can be moved into the current release as
long as there is still time in the iteration to do them.  However,
an equal number of JellyBeans must be moved to the next development
release.

When the release is complete, delete the stories and start again.

* Version 0.5.0
== Version 0.5.0
The main purpose is to abstract the item types and more easily allow
many different types of quizes.  The two biggest features are
to roll in the Chinese version from CLDrill and to allow users
to define their own quiz item types.

* Version 0.4.1
== Version 0.4.1

  This is a development release.  The main purpose of this development
  release is to give more flexibility in the problem types.  The user
  can choose which ones they want to review and each one will be
  reviewed independently.

  :PROPERTIES:
  :COLUMNS: %40ITEM %JellyBeans(Total){+} %Done(Done){+} %Percent(Percent) %CurrentVelocity(Current) %NeededVelocity(Needed)
  :StartDate: <2010-03-17 Wed>
  :CurrentDate:  <2010-03-19 Fri>
  :EndDate: <2010-04-18 Sun>
  :PERCENT: 0
  :CurrentVelocity: 0
  :NeededVelocity: 0
  :END:

** Velocity Table
== Velocity Table

<tt>
#+BEGIN: columnview :maxlevel 1 :id local
| ITEM            | Total | Done | Percent | Current | Needed |
|-----------------+-------+------+---------+---------+--------|
| * Version 0.4.1 |    17 |    6 |    35.3 |    3.00 |   0.53 |
#+TBLFM: @2$4=($3/$2)*100;%.1f::@2$5=$3/($PROP_CurrentDate - $PROP_StartDate);%.2f::@2$6=$2/($PROP_EndDate - $PROP_StartDate);%.2f
#+END
</tt>

Note: To update the current velocity you must set the CurrentDate in
the properties.  Also, when setting TODO tasks to DONE, you must set
the number of jellybeans done in the properties of the task.

** Current Stories
== Current Stories

** DONE Options for allowing the user to choose problem types [2/2]
   Allow the user to choose which problem types they want to be
   exposed to in the review set.
   - [X] Add options to the model
   - [X] Add options to the UI	 

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 2
   :END:

** DONE Schedule each problem type separately [4/4]
   Currently there is only one review for each item.  The strategy
   randomly chooses one type of the allowed problem types to review.
   Create a separate schedule for each allowed problem type and
   review it independently.  But if the user gets one wrong, start
   both again.
   - [X] Store a problem type in the item status rather than a
     schedule.  Store the schedule in the problem type
   - [X] Allow more than one problem type in the status
   - [X] Automatically create/remove statuses based on allowed problem
     types. New statuses should be reviewed at the existing schedule
     or 5 days, whichever is less.
   - [X] Operations on working set items must change all of the schedules.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 3
   :END:

** DONE If there is no kanji don't schedule a kanji problem

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

** DONE Put a maximum of 25% extra beyond normal schedule
        Sometimes you leave the stack for a long time but
        you are able to answer the question anyway.  This
        can cause the new schedule to be quite long depriving
        you of practice.  Put a maximum on how much extra
        you can add to the schedule

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 2
   :END:
   
** TODO Use smaller backoff for longer durations
        I have noticed that I fail in my longer duration items
        more often than my shorter duration items.  With the
        idea of also reviewing every item at least once
        every 6 months, I will modify the backoff so that it
        falls off to 1.0 at 180 days.  In other words a duration
        of 1 day or less will have a backoff of 2.0 while a
        duration of 180 days will have a backoff of 180 days.
        It will decrease linearly, so at 90 days the backoff
        is 1.5.  I also need to update the stats so that the
        categories are more appropriate.

    :PROPERTIES:
    :JellyBeans: 2
    :Done: 0
    :END:

** TODO One of the items in the working set had a potential schedule of 72 days

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** DONE Early reviewed items scheduled too soon
   If an item is reviewed earlier and answered correctly, it can be
   given a duration that is less than it's earlier duration.  This is
   confusing at least and maybe should be fixed. Basically made it
   so it would never schedule less than the previous duration.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

** TODO Review Mode isn't reset after loading a file
    If you turn review mode on and then load another file,
    the button stays depressed.  But it actually doesn't stay
    in review mode.  Change it so that when you load another
    file, review mode is turned off and the button isn't depressed.

    :PROPERTIES:
    :JellyBeans: 1
    :Done: 0
    :END:

** TODO Time to learn after the first item is waaay too big (10798.7s) [1/2]
   - [X] Refactor tests
   - [ ] Test to see if this is a real problem	 

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

** TODO Specify a file to load on the command line

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Allow the user to choose the dictionary
   Instead of having a single dictionary that is loaded, allow the
   user to choose the dictionary they want to load from the Options
   page. This filename is then stored in the drill file.  Remove
   edict from the distribution.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 0
   :END:

** TODO Automatically load dictionary option
   Have an option that is saved with the drill to automatically
   load the dictionary when the drill is loaded.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Sort new items correctly when they have been moved [1/2]
   When items are moved in the AllVocab window, make sure
   they are in the correct presentation order in the
   NewSet. 
   - [X] Sort New Set items when the file is loaded so that
		 old files have the correct order.
   - [ ] Physically move New Set items when they are moved in
	    the AllVocabWindow so that they are in the correct
	    order.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 1
   :END:


* Version 0.4.2
== Version 0.4.2

This section lists important work that falls out of the
previous iteration for one reason or another.

** TODO Allow undo
** TODO Allow Lean/Unlean for any arbitrary item
** TODO Alternate Language support (i.e., Chinese)
** TODO Start new drills in Preview mode
   When a drill has been loaded for the first time (or after a reset), 
   show the first item in preview mode.  This allows the user to
   update the options, or to save the quiz before selecting the first
   problem.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO New Drill Splash Screen
   Create a splash screen explaining that this is a new drill and
   the system is in Preview mode.  Press N to start

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Simply loading a drill shouldn't modify it
   Currently the "must save" flag is set when a drill is loaded.
   This should only be set after the first item has been answered.
   Of course if the drill was imported from an EDICT file then
   the "must save" flag should be set immediately.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:


* Backlog
== Backlog

** TODO Allow searching by Kanji

** TODO If a reading can't be found in the dictionary, seach 
   again taking off one character at a time from the end of the
   reading. 
   :PROPERTIES:
   :JellyBeans: 2
   :END:

** TODO Need a mechanism for publishing warnings and errors.

** TODO Give feedback to the user when we refuse to edit or add an item.

** TODO When save fails, indicate it to the user 
   before bringing up the save as dialog.

** TODO Full test coverage for all the model objects

** TODO Full test coverage for all the contexts

** TODO Don't steal focus when putting up windows that take no input.  
   Deferred from 0.3.3 from 0.3.3.  I tried to do it, but it never
   worked.  I suspect a race condition in GTK and it's not important
   enough to kill myself over.

** TODO Define a structure for grammar.

** TODO Display parts of speech tags next to what they modify
   (i.e. each definition, or sentence)

** TODO Allow the user to choose what tags to display.  
   Save this in the drill.

** TODO Associate data items with the dictionary they belong to.
   Only load the dictionary if it's in the drill. (Question: Should it
   unload the dictionary on next drill?  Probably yes...)

** TODO Indicate when the item has been promoted.

** TODO Create a recent used menu for loading drills that you've used recently.

** TODO Allow user to set the formatting for each type of data.  
   Store the formatting in the drill.

** TODO Define the structure of the data in the drill.  
   In other words, create a dynamic data type that defines the
   structure of the data item that is to be drilled.  Save it in the
   drill itself.  Create a structure for edict vocabulary.

** TODO Rename the methods that take Vocabulary
   (like Quiz#add()) to indicate that it's for Vocabulary (i.e.,
   Quiz#addVocab())

** TODO Replace webgen with something else.  

** TODO Create a keyboard only mode.
   Advanced users can probably just use the keyboard.  In this mode,
   Remove any UI that is surpulfluous.

** TODO Windows Packaging Spike [0/5]
   Determine the feasibility of creating a windows packaging.
   Place to start:
   - [ ] Create a rake target to make a self contained directory with
     context and JLDrill. Have a ruby script that runs everything
     correctly on Windows and Linux given that Ruby, GNOME, and
     Ruby-Gnome are already installed.
   - [ ] Create a custom version of Ruby-Gnome that is packaged in the
     self contained directory and is used instead of the installed
     Ruby-Gnome.  Note: Probably have to package Gtk+ here as well.
     If not make another step for that.
   - [ ] Create some way to package a custom ruby interpreter in the
     self contained directory.
   - [ ] Create a self extracting archive for the self contained
     directory.
   - [ ] Create an installer for the custom fonts

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 0
   :END:

** TODO Create Windows packaging.
** TODO Create a structure for Tanaka corpus.

** TODO Create a dictionary back end to allow it to use online dictionaries,
   or dictionary servers (fantasdic? stardict?)

** TODO Create Redhat packaging.

** TODO Create OSX packaging.
** TODO Allow user to modify the global backoff.
   Allow the user to modify the global backoff from the options.  This
   must be saved with the drill.  When the backoff is changed, all the
   items that are currently scheduled will have to be scaled
   accordingly.  For example, if the backoff changes from 2.0 to 1.5,
   if there was an item with a duration of 10, then the duration
   becomes 7.5.  If the item had been waiting for 5 days (50% of the
   duration), then reset it so that it has been waiting for 3.75 days
   (50% of 7.5).  Then resort all the items.

   :PROPERTIES:
   :JellyBeans: 3
   :END:

