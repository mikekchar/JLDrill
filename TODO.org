
<h2>
* JLDrill Version 0.3.4
</h2>

  :PROPERTIES:
  :COLUMNS: %40ITEM %JellyBeans(Total){+} %Done(Done){+} %Percent(%) %CurrentVelocity(Current) %NeededVelocity(Needed)
  :StartDate: <2008-12-25 Thu>
  :CurrentDate:  <2009-03-25 Wed>
  :EndDate: <2009-04-03 Fri>
  :PERCENT: 0
  :CurrentVelocity: 0
  :NeededVelocity: 0
  :END:

This is a development release.  The main purpose is to improve
workflow for creating and editing drills.

** Development Summary

<pre>
#+BEGIN: columnview :maxlevel 1 :id local
| ITEM                    | Total | Done |    % | Current | Needed |
|-------------------------+-------+------+------+---------+--------|
| * JLDrill Version 0.3.4 |    21 |   18 | 85.7 |    0.20 |   0.21 |
#+TBLFM: @2$4=($3/$2)*100;%.1f::@2$5=$3/($PROP_CurrentDate - $PROP_StartDate);%.2f::@2$6=$2/($PROP_EndDate - $PROP_StartDate);%.2f
#+END
</pre>

Note: To update the current velocity you must set the CurrentDate in
the properties.  Also, when setting TODO tasks to DONE, you must set
the number of jellybeans done in the properties of the task.


** DONE Add description for 々 in the kanji popup

  :PROPERTIES:
  :JellyBeans: 1
  :Done: 1
  :END:

** DONE Pressing cancel when quitting
  Pressing cancel when trying to save after quitting shouldn't leave
  you hung with no window.  This is unplanned work accounted for in
  the velocity.

** DONE JLDrill crashes.
  I don't know why it crashed (and I didn't record the reason when I
  fixed it.)  This is unplanned work accounted for in the velocity.

** DONE Removing kanji from a kanji problem
  If you have a kanji question and edit it to take out the kanji,
  when you finish the editing, the problem question is blank.
  In this situation, the problem should become a meaning problem.
  This is unplanned work accounted for in the velocity.

** DONE Ability to load dictionary in all windows
   You should be able to load the dictionary with Ctl-D from
   both the edit and add windows

  :PROPERTIES:
  :JellyBeans: 2
  :Done: 2
  :END:

** DONE Improved workflow for the add window
   Whent the window comes up, the cursor is placed in the Readings box.
   If the user presses Ctrl-S the item is searched.  If there are any
   results, the focus is put on the search box.  If not, the focus
   remains where it is.  When the focus is on the search box, up arrow
   and down arrow will select the previous and next tiems
   respectively. Return will insert the item and the focus will be
   placed on the "Add" button. 

   :PROPERTIES:
   :JellyBeans: 5
   :Done: 5
   :END:

** DONE Improved workflow for the edit window
   Similar to the add window.  But when the window first opens, the
   focus is on the search box if there are any entries.  Note:  if the
   user changes items, the window does not steal focus, but if
   possible the search box should have the focus when the window
   regains focus.  If there are no entries in the search box then focus
   should be on the Readings box.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 3
   :END:

** DONE Don't change the viewing state when updating vocab
   If the user has seen the answer for the question, display
   it after the vocabulary has been updated.

   :PROPERTIES:
   :JellyBeans: 1
   :DONE: 1
   :END:

** DONE Renumber item poitions when resetting the drill.
   This will fix problems with old drills that have gotten have gotten
   out of whack.

   :PROPERTIES:
   :JellyBeans: 1
   :DONE: 1
   :END:

** DONE Fix slowness in editing
        Sometimes it is slow to edit an entry.  It takes a long time
		to come up.  Possibly the search is taking a long time.
		But when you set, it is also slow.  I saw this with
		the word shin 芯
** DONE Be able to delete or edit an item from the "All Vocab" list. [12/12]
   - [X] Refactor widget to be a mixin
   - [X] include Widget from GtkWidget
   - [X] make gtkAdd/RemoveWidget have default values that log a warning
   - [X] Refactor VocabularyTable to hold items (rename it to ItemTable)
   - [X] Make dictionary searches return item lists
		 At this point I decided to do some refactoring of Item.  I
		 suppose it wasn't really necessary in the end, but I was
         really confused about what I wanted Item to do, so I decided
         it was a good idea while I was playing with Item lists.
       - [X] Move position information from ItemStatus into Item
       - [X] Create a hash table to contain status information for
         each drill
       - [X] Move ItemStatus into the Quiz directory and make it
         totally related to that Quiz
   - [X] Update the All Vocab list when things change.  Also select
		 the appropriate vocabulary when things change.
       - [X] Implement the ItemTableWindow as a window, not a dialog
         (duh...)
       - [X] Implement search in ItemTable
       - [X] Updating the problem updates the All Vocab list
       - [X] Updating a problem, selects it in the list
       - [X] New problems select it in the list
       - [X] Opening the list highlights the current problem
   - [X] Adding items to a large file is very slow.  That's because
     it's checking each one to see if it already exists.  Possibly we
     need to add a hash of some sort to cut down the search parameters.
   - [X] Adding items to a blank quiz doesn't update the all vocab
     table
   - [X] Editing and item so that it's the same as an existing item
     results in 2 of the same item.
   - [X] "E" or activation in the All Vocab list allows editing the item
   - [X] Create a "display only mode" for items that are being edited
     or added.
   - [X] "D" deletes the currently highlighted item.  Prompts first.

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 2
   :END:

** DONE Be able to delete the current item. [1/1]
   - [X] "D" deletes the current problem.  Prompts first.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 3
   :END:

** TODO Be able to change the order of items in the "All Vocab" list.
   Basically, the user selects an item.  If they press up arrow, the
   item will go up. If the press down arrow, the item will go down.

   :PROPERTIES:
   :JellyBeans: 2
   :END:

** TODO Be able to create a new drill

   :PROPERTIES:
   :JellyBeans: 1
   :END:

* Backlog
</h2>

** TODO If a reading can't be found in the dictionary, seach 
   again taking off one character at a time from the end of the
   reading. 
   :PROPERTIES:
   :JellyBeans: 2
   :END:


<h2>
** TODO Give feedback to the user when we refuse to edit or add an item.
** TODO In the add window, don't reload the table if the reading hasn't changed.
** TODO Automatically load dictionary option
   Have an option that is saved with the drill to automatically
   load the dictionary when the drill is loaded.

** TODO Allow user to modify the global backoff.
   Allow the user to modify the global backoff from the options.  This
   must be saved with the drill.  When the backoff is changed, all the
   items that are currently scheduled will have to be scaled
   accordingly.  For example, if the backoff changes from 2.0 to 1.5,
   if there was an item with a duration of 10, then the duration
   becomes 7.5.  If the item had been waiting for 5 days (50% of the
   duration), then reset it so that it has been waiting for 3.75 days
   (50% of 7.5).  Then resort all the items.

   :PROPERTIES:
   :JellyBeans: 3
   :END:

** TODO Need a mechanism for publishing warnings and errors.

** TODO Full test coverage for all the model objects

** TODO Full test coverage for all the contexts

** TODO Don't steal focus when putting up windows that take no input.  
   Deferred from 0.3.3 from 0.3.3.  I tried to do it, but it never
   worked.  I suspect a race condition in GTK and it's not important
   enough to kill myself over.

** TODO Create a recent used menu for loading drills that you've used recently.

** TODO Stop distributing edict in the gem.  
   Allow the user to set where the dictionary is.

** TODO Allow user to set the formatting for each type of data.  
   Store the formatting in the drill.

** TODO Define the structure of the data in the drill.  
   In other words, create a dynamic data type that defines the
   structure of the data item that is to be drilled.  Save it in the
   drill itself.  Create a structure for edict vocabulary.

** TODO Rename the methods that take Vocabulary
   (like Quiz#add()) to indicate that it's for Vocabulary (i.e.,
   Quiz#addVocab())

** TODO Define a structure for grammar.

** TODO Display parts of speech tags next to what they modify
   (i.e. each definition, or sentence)

** TODO Allow the user to choose what tags to display.  
   Save this in the drill.

** TODO Associate data items with the dictionary they belong to.
   Only load the dictionary if it's in the drill. (Question: Should it
   unload the dictionary on next drill?  Probably yes...)

** TODO Create Debian packaging.

** TODO Create Windows packaging.

** TODO Indicate when the item has been promoted.

** TODO When save fails, indicate it to the user 
   before bringing up the save as dialog.

** TODO Replace webgen with something else.  

** TODO Create a dictionary back end to allow it to use online dictionaries,
   or dictionary servers (fantasdic? stardict?)

** TODO Create a structure for Tanaka corpus.

** TODO Create Redhat packaging.

** TODO Create OSX packaging.

