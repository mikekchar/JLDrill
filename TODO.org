= JLDrill TODO
* Version 0.3.5
  This is a development release.  The main purpose is to improve
  workflow for creating and editing drills.

  :PROPERTIES:
  :COLUMNS: %40ITEM %JellyBeans(Total){+} %Done(Done){+} %Percent(Percent) %CurrentVelocity(Current) %NeededVelocity(Needed)
  :StartDate: <2009-06-06 Mon>
  :CurrentDate:  <2009-12-22 Mon>
  :EndDate: <2010-01-03 Sun>
  :PERCENT: 0
  :CurrentVelocity: 0
  :NeededVelocity: 0
  :END:

== Velocity Table
** Development Summary

<pre>
#+BEGIN: columnview :maxlevel 1 :id local
| ITEM            | Total | Done | Percent | Current | Needed |
|-----------------+-------+------+---------+---------+--------|
| * Version 0.3.5 |    38 |   20 |    52.6 |    0.10 |   0.18 |
#+TBLFM: @2$4=($3/$2)*100;%.1f::@2$5=$3/($PROP_CurrentDate - $PROP_StartDate);%.2f::@2$6=$2/($PROP_EndDate - $PROP_StartDate);%.2f
#+END
</pre>

Note: To update the current velocity you must set the CurrentDate in
the properties.  Also, when setting TODO tasks to DONE, you must set
the number of jellybeans done in the properties of the task.

** Work to be done
== Current Stories

** DONE Create a desktop entry for GNOME.  
   Also change to an SVG icon.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

** DONE Reset difficulty over time.
   If the user goes for a certain period of time without seeing the
   item and subsequently gets it right, reset the difficulty to
   be anagolous to the time.  In other words, if they get it right
   after 5 days, reset the difficulty to 0

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

** DONE Don't always schedule from now.
   If we are behind, schedule new items starting from the date
   of the first item on the list.  Otherwse schedule new items
   from now.  When scheduling review items, always schedule
   from the scheduled date.  The effect of this is to deal with
   the problem of getting behind while keeping similar review
   items in similar places.  NOTE: This was superceded by the
   new scheduling algorithm.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 3
   :END:

** DONE Allow user to cut and paste items in the vocabulary list
   The user can press Ctrl-X to mark an item for cutting.
   Then they press Ctrl-V to move it before the currently selected
   item.  This allows users to more quickly move items a long
   distance in the vocabulary list.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 3
   :END:

** DONE Show scheduled item statistics as items per day
   Instead of showing the number of items scheduled in the
   first 6 days, use the range levels and show the average
   number of items scheduled per day for each level.  The
   statistics should start from the first item, not the
   now.  Add a "Skew" statistic showing how many days the
   first item is scheduled from now (negative is behind,
   positive is ahead).  NOTE: This was superceded by the new
   scheduling algorithm.

  :PROPERTIES:
  :JellyBeans: 2
  :Done: 2
  :END:

** DONE Add a timer for each question [5/5]
   Add a timer to the question.  After a certain amount of time
   change the background of the pane to another color.
   This allows the user to place a limit on the amount of time
   they use thinking.  The time limit is variable.  When the
   user gets a question right in review mode, that becomes the
   time limit for the question.  The question changes color
   (expires) after that time limit is expended
   - [X] Change the background of each question after 2 seconds
   - [X] Set the time limit when the user gets the question right in
     review mode.  Note that the time limit will be 0 on the first review.
   - [X] Change the resolution of the timer to be sub-second
   - [X] Save the time limit for each item
   - [X] Change the background after the time limit expires for each
     question.  If it is 0 then never change the background.

  :PROPERTIES:
  :JellyBeans: 3
  :Done: 3
  :END:

** DONE Create a Debian package [4/4]
   - [X] Create rough debian package and build it from the rakefile
   - [X] Create debian package for Context and have jldrill depend on
     it.
   - [X] Create a method for the debian installed package to find
     its data files
   - [X] Remove unneeded items from the debian package
   
   :PROPERTIES:
   :JellyBeans: 4
   :Done: 4
   :END:

** DONE Fix No Option 'X-AppInstall-Package' in 'Desktop Entry' bug

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

** DONE Sort based on review rate [3/3]
   Right now all the entries are sorted on expirey date.  That means
   that an item due today is sorted ahead of an item due tomorrow.
   This is prolematic in that we end up having date skews etc.
   Instead sort the items based on the percentage of time they have
   sat until their expirey.  That way an item that is scheduled for
   10 hours and only waited 1 hour will be scheduled *after* an
   item that was scheduled for 100 days but has waited for 80 days.
   - [X] There is no concept of scheduled time now.  Remove the
         scheduled time from the statistics.
   - [X] Since the items are not scheduled, there is also no concept
         of skew.  Remove it from the statistics.
   - [X] Add a current review rate to show you where you are in the
     stack.  Rename "Review Rate" to "Avg Review Rate".

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:
   
** TODO All Vocab is truncated and in the wrong order for kanjidrill.
** TODO One of the items in the working set had a potential schedule of 72 days
** TODO Early reviewed items scheduled too soon
   If an item is reviewed earlier and answered correctly, it can be
   given a duration that is less than it's earlier duration.  This is
   confusing at least and maybe should be fixed.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Time to learn after the first item is waaay too big (10798.7s) [1/2]
   - [X] Refactor tests
   - [ ] Test to see if this is a real problem	 

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

** TODO Windows Packaging Spike [0/5]
   Determine the feasibility of creating a windows packaging.
   Place to start:
   - [ ] Create a rake target to make a self contained directory with
     context and JLDrill. Have a ruby script that runs everything
     correctly on Windows and Linux given that Ruby, GNOME, and
     Ruby-Gnome are already installed.
   - [ ] Create a custom version of Ruby-Gnome that is packaged in the
     self contained directory and is used instead of the installed
     Ruby-Gnome.  Note: Probably have to package Gtk+ here as well.
     If not make another step for that.
   - [ ] Create some way to package a custom ruby interpreter in the
     self contained directory.
   - [ ] Create a self extracting archive for the self contained
     directory.
   - [ ] Create an installer for the custom fonts

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 0
   :END:

** TODO Specify a file to load on the command line

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Allow the user to choose the dictionary
   Instead of having a single dictionary that is loaded, allow the
   user to choose the dictionary they want to load from the Options
   page. This filename is then stored in the drill file.  Remove
   edict from the distribution.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 0
   :END:

** TODO Automatically load dictionary option
   Have an option that is saved with the drill to automatically
   load the dictionary when the drill is loaded.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Sort new items correctly when they have been moved [1/2]
   When items are moved in the AllVocab window, make sure
   they are in the correct presentation order in the
   NewSet. 
   - [X] Sort New Set items when the file is loaded so that
		 old files have the correct order.
   - [ ] Physically move New Set items when they are moved in
	    the AllVocabWindow so that they are in the correct
	    order.

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 1
   :END:

** TODO Start new drills in Preview mode
   When a drill has been loaded for the first time (or after a reset), 
   show the first item in preview mode.  This allows the user to
   update the options, or to save the quiz before selecting the first
   problem.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO New Drill Splash Screen
   Create a splash screen explaining that this is a new drill and
   the system is in Preview mode.  Press N to start

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Simply loading a drill shouldn't modify it
   Currently the "must save" flag is set when a drill is loaded.
   This should only be set after the first item has been answered.
   Of course if the drill was imported from an EDICT file then
   the "must save" flag should be set immediately.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

** TODO Update Documentation

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

** TODO Update quizes

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:
   
* Backlog
== Future Stories

** TODO Replace webgen with something else.  

** TODO Find a way to build the debian package using tools version in Debian
** TODO Create Windows packaging.

** TODO Create a keyboard only mode.
   Advanced users can probably just use the keyboard.  In this mode,
   Remove any UI that is surpulfluous.

** TODO If a reading can't be found in the dictionary, seach 
   again taking off one character at a time from the end of the
   reading. 
   :PROPERTIES:
   :JellyBeans: 2
   :END:

** TODO Give feedback to the user when we refuse to edit or add an item.

** TODO Allow user to modify the global backoff.
   Allow the user to modify the global backoff from the options.  This
   must be saved with the drill.  When the backoff is changed, all the
   items that are currently scheduled will have to be scaled
   accordingly.  For example, if the backoff changes from 2.0 to 1.5,
   if there was an item with a duration of 10, then the duration
   becomes 7.5.  If the item had been waiting for 5 days (50% of the
   duration), then reset it so that it has been waiting for 3.75 days
   (50% of 7.5).  Then resort all the items.

   :PROPERTIES:
   :JellyBeans: 3
   :END:

** TODO Allow searching by Kanji

** TODO Need a mechanism for publishing warnings and errors.

** TODO Full test coverage for all the model objects

** TODO Full test coverage for all the contexts

** TODO Don't steal focus when putting up windows that take no input.  
   Deferred from 0.3.3 from 0.3.3.  I tried to do it, but it never
   worked.  I suspect a race condition in GTK and it's not important
   enough to kill myself over.

** TODO Create a recent used menu for loading drills that you've used recently.

** TODO Allow user to set the formatting for each type of data.  
   Store the formatting in the drill.

** TODO Define the structure of the data in the drill.  
   In other words, create a dynamic data type that defines the
   structure of the data item that is to be drilled.  Save it in the
   drill itself.  Create a structure for edict vocabulary.

** TODO Rename the methods that take Vocabulary
   (like Quiz#add()) to indicate that it's for Vocabulary (i.e.,
   Quiz#addVocab())

** TODO Define a structure for grammar.

** TODO Display parts of speech tags next to what they modify
   (i.e. each definition, or sentence)

** TODO Allow the user to choose what tags to display.  
   Save this in the drill.

** TODO Associate data items with the dictionary they belong to.
   Only load the dictionary if it's in the drill. (Question: Should it
   unload the dictionary on next drill?  Probably yes...)

** TODO Indicate when the item has been promoted.

** TODO When save fails, indicate it to the user 
   before bringing up the save as dialog.

** TODO Create a dictionary back end to allow it to use online dictionaries,
   or dictionary servers (fantasdic? stardict?)

** TODO Create a structure for Tanaka corpus.

** TODO Create Redhat packaging.

** TODO Create OSX packaging.
