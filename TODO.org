JLDrill TODO List

* Process

This file contains the development plan for JLDrill.  The first
section discusses the purpose of the next stable release.  Following
that is the current development release.  The number of JellyBeans
chosen for the development release should be enough so that it can
be released in one or two weeks.

Following the current development release is the next development
release.  New stories can be moved into the current release as
long as there is still time in the iteration to do them.  However,
an equal number of JellyBeans must be moved to the next development
release.

When the release is complete, delete the stories and start again.

* The Upcoming Release is Version 0.7.0

Version 0.7.0 will be a fun development release for me.
I will do whatever I feel like.

* Version 0.6.1

Let's have fun!
  
  :PROPERTIES:
  :COLUMNS: %40ITEM %JellyBeans(Total){+} %Done(Done){+} %Percent(Percent) %CurrentVelocity(Current) %NeededVelocity(Needed)
  :StartDate: <2011-02-07 Tue>
  :CurrentDate:  <2012-02-07 Tue>
  :EndDate: <2012-03-02 Fri>
  :PERCENT: 0
  :CurrentVelocity: 0
  :NeededVelocity: 0
  :END:

** Velocity Table

The velocity table shows an overview of the current development.  The
ITEM column shows which iteration we are doing.  Total shows the total
number of "Jelly Beans" that are scheduled for the release.  A Jelly
Bean is an arbitrary unit of effort.  Done shows how many Jelly Beans
have been finished to date.  Percent shows what percentage of the
iteration is finished.

The last two columns show the velocity for the program.  Current shows
the number of Jelly Beans that have been finished per day.  Needed
shows the number of Jelly Beans per day that must be finished for the
iteration to finish as scheduled.

#+BEGIN: columnview :maxlevel 1 :id local
| ITEM            | Total | Done | Percent | Current | Needed |
|-----------------+-------+------+---------+---------+--------|
| * Version 0.6.1 |    13 |    1 |     7.7 |    0.00 |   0.03 |
#+TBLFM: @2$4=($3/$2)*100;%.1f::@2$5=$3/($PROP_CurrentDate - $PROP_StartDate);%.2f::@2$6=$2/($PROP_EndDate - $PROP_StartDate);%.2f
#+END

Note: To update the current velocity you must set the CurrentDate in
the PROPERTIES section of the section.  When setting TODO tasks to
DONE, you must set the number of JellyBeans done in the PROPERTIES of
the task.

** Current Items

*** DONE Increase Interval for relearned items
	New items start with a potential schedule of 5 days.
	Reviewed items have a potential schedule equal to the
	amount of time that passed since their last test.
	Every time the user gets the item wrong the potential
	schedule is decreased by 20% of it's current value.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 1
   :END:

*** TODO Remove levels from the working set
	Remove the levels from the working set items.  Instead create
	schedules for the working set items the same way that
	they are created for the review set.  Sort the working set
	by percentage of potential schedule waited after every 
	insertion/schedule change.  The initial potential schedule
	is 20 seconds +- 10% for each problem type.  When a problem
	type has been successfully guessed the correct number of
	times, it is given a review set schedule.  When all problem
	types have been given review set schedules, the item is
	promoted to the review set.  The schedules it had in the
	working set are retained.  If the user gets a problem
	type wrong, then ALL the problem types for the item have
	their schedule set to 10 seconds +- 10%.

	- [ ] Make reading problems valid in working set
    - [ ] Get rid of having to pass the threshold around

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

*** TODO Modify promotion strategy
	When learning/relearning, we actually want to try to
	forget the item that we are learning in order to activate
	the spacing effect.  We want to select a speed of review
	such that we forget until we can't forget any longer.
	The question is how to determine this speed.

*** TODO Allow users to update their drills
   A user can update a drill by appending the new version to their drill.
   But if the vocabulary has changed in the new/old drill (because the
   dictionary was updated for instance), the new vocabulary will be added
   as a new item rather than updating the old item.  Put a unique
   ID on each item.  When merging, if the IDs are the same overwrite the old
   one.  For old drills, if there is no ID, assume the items are the same
   if the position, reading and kanji are the same.  (Not sure about the
   position).

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

*** TODO New Drill Splash Screen
   Create a splash screen explaining that this is a new drill and
   the system is in Preview mode.  Press N to start

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Personalized Directories
	Create a configuration directory that contains the users configuration
	for JLDrill.

	:PROPERTIES:
	:JellyBeans: 2
	:Done: 0
	:END:

*** TODO Global Options
	Allow the user to set global options.  This will be saved in an
	options file in the search path.

	:PROPERTIES:
	:JellyBeans: 1
	:Done: 0
	:END:

*** TODO Automatically update Dictionary
	Allow the user to select a download site for a dictionary and
	automatically updated it when it changes.

	:PROPERTIES:
	:JellyBeans: 2
	:Done: 0
	:END:

*** TODO Automatically update Collocations
	Allow the user to select a download site for a collocation dictionary and
	automatically updated it when it changes.

	:PROPERTIES:
	:JellyBeans: 2
	:Done: 0
	:END:

*** TODO Ability to switch between Japanese and Chinese mode
	When when one of the dictionaries is loaded and you load a file
	that uses the other language, the previous dictionary remains.
	It should not use it in the other language.  If the new language
	dictionary is set to autoload, it should autoload, replacing the
	previous dictionary in memory.  However, if a new language dictionary
	is not loaded, the previous dictionary should not be removed.


* Backlog

These items are ideas that may or may not make it into
an upcoming development version.  They are organized loosely
by how important I think they are (the most important is
first).  Simply being on this list is no guarantee that
I will implement it.  However, items near the top are very
likely to appear in the next release or two.  If you have
feedback on this list, or its order, please email me.

** Items

*** TODO Need a mechanism for publishing warnings and errors.
   Warnings and errors must be displayed to the user in a
   consisten way.  To be honest I need to think more about what
   that way is.  Currently errors are printed to the console
   which is no good.

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

*** TODO Give feedback to the user when we refuse to edit or add an item.
   Probably use the aforementioned warning and error mechanism.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO When save fails, indicate it to the user 
   before bringing up the save as dialog.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Start new drills in Preview mode
   When a drill has been loaded for the first time (or after a reset), 
   show the first item in preview mode.  This allows the user to
   update the options, or to save the quiz before selecting the first
   problem.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Simply loading a drill shouldn't modify it
   Currently the "must save" flag is set when a drill is loaded.
   This should only be set after the first item has been answered.
   Of course if the drill was imported from an EDICT file then
   the "must save" flag should be set immediately.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Indicate when the item has been promoted.
   When an item has been moved to the review set, print some
   kind of congratulatory message.  Possibly show some kind of
   stats like Anki does.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Windows Packaging [0/5]
   Determine the feasibility of creating a windows packaging.
   Place to start:
   - [ ] Create a self extranting archive that downloads and
		 installs ruby, and then run gem install jldrill
   - [ ] Create an uninstall script.
   - [ ] Create a jldrill upgrade script.
   - [ ] Create an executable with an icon for jldrill
   - [ ] Install icon on the desktop and in the menu.  Add uninstall
		 and upgrade scripts in the menu
   - [ ] Create an installer for the custom fonts

   :PROPERTIES:
   :JellyBeans: 3
   :Done: 0
   :END:

*** TODO Allow Learn/Unlearn for any arbitrary item
*** TODO Define the structure of the data in the drill.  
   In other words, create a dynamic data type that defines the
   structure of the data item that is to be drilled.  Save it in the
   drill itself.  Create a structure for edict vocabulary.

*** TODO Define a structure for grammar.
*** TODO Display parts of speech tags next to what they modify
   (i.e. each definition, or sentence)

*** TODO Allow the user to choose what tags to display.  
   Save this in the drill.

*** TODO Associate data items with the dictionary they belong to.
   Only load the dictionary if it's in the drill. (Question: Should it
   unload the dictionary on next drill?  Probably yes...)

*** TODO 彼処 かしこ finds あそこ 
   When searching the tanaka corpus the reading should be taken into
   account if given.  Thus examples with the same kanji but different
   readings should not be shown.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Allow undo
*** TODO Insert Popup Before Item
   If the user presses a key (TBD) while a popup is up, an item
   contiaining the information in the popup is added to the quiz
   immediately before the current item.

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Aggressive Search
   If a reading can't be found in the dictionary, seach 
   again taking off one character at a time from the end of the
   reading. 

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

*** TODO Create a recent used menu for loading drills that you've used recently.
*** TODO One of the items in the working set had a potential schedule of 72 days

   :PROPERTIES:
   :JellyBeans: 1
   :Done: 0
   :END:

*** TODO Time to learn after the first item is waaay too big (10798.7s) [1/2]
   - [X] Refactor tests
   - [ ] Test to see if this is a real problem	 

   :PROPERTIES:
   :JellyBeans: 2
   :Done: 0
   :END:

*** TODO Full test coverage for all the model objects
*** TODO Full test coverage for all the contexts
*** TODO Don't steal focus when putting up windows that take no input.  
   Deferred from 0.3.3.  I tried to do it, but it never
   worked.  I suspect a race condition in GTK and it's not important
   enough to kill myself over.

*** TODO Allow user to set the formatting for each type of data.  
   Store the formatting in the drill.

*** TODO Rename the methods that take Vocabulary
   (like Quiz#add()) to indicate that it's for Vocabulary (i.e.,
   Quiz#addVocab())

*** TODO Create a keyboard only mode.
   Advanced users can probably just use the keyboard.  In this mode,
   Remove any UI that is surpulfluous.

*** TODO Create a dictionary back end to allow it to use online dictionaries,
   or dictionary servers (fantasdic? stardict?)

*** TODO Create Redhat packaging.
*** TODO Create OSX packaging.
*** TODO Allow user to modify the global backoff.
   Allow the user to modify the global backoff from the options.  This
   must be saved with the drill.  When the backoff is changed, all the
   items that are currently scheduled will have to be scaled
   accordingly.  For example, if the backoff changes from 2.0 to 1.5,
   if there was an item with a duration of 10, then the duration
   becomes 7.5.  If the item had been waiting for 5 days (50% of the
   duration), then reset it so that it has been waiting for 3.75 days
   (50% of 7.5).  Then resort all the items.

   :PROPERTIES:
   :JellyBeans: 3
   :END:

